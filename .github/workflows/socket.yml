name: Socket Service CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'src/socket/**'
      - '.github/workflows/socket.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/socket/**'
      - '.github/workflows/socket.yml'

env:
  NODE_ENV: production
  AWS_REGION: us-east-1
  SOCKET_PORT: 3001
  ECR_REPOSITORY: pollen8-socket-service
  ECS_SERVICE: pollen8-socket-service
  ECS_CLUSTER: pollen8-cluster

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      working-directory: src/socket
      run: npm ci
    - name: Run linting
      working-directory: src/socket
      run: npm run lint
    - name: Run tests
      working-directory: src/socket
      run: npm test
    - name: Build TypeScript
      working-directory: src/socket
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run security scan
      working-directory: src/socket
      run: |
        npm install
        npm audit --production --audit-level=moderate
    - name: Upload security scan results
      uses: actions/upload-artifact@v2
      with:
        name: npm-audit-report
        path: src/socket/npm-audit.json
    - name: Check for vulnerabilities
      run: |
        if [[ -s src/socket/npm-audit.json ]]; then
          echo "Vulnerabilities found. Please review the npm-audit-report artifact."
          exit 1
        fi

  build-and-push-image:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f src/socket/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Deploy to Amazon ECS
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
    - name: Perform health checks
      run: |
        # Add health check logic here
        echo "Performing health checks..."
        # Example: curl health check endpoint
        # if ! curl -sSf https://socket.pollen8.com/health; then
        #   echo "Health check failed"
        #   exit 1
        # fi
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        # Add rollback logic here
        # Example: Revert to previous task definition
        # PREVIOUS_TASK_DEF=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].taskDefinition' --output text)
        # aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $PREVIOUS_TASK_DEF
        # aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE